#!/usr/bin/perl

use 5.012;
use warnings;

use IPC::Run qw( start finish );

our $NAME = "run::testsuite";
our ($testnum, @testnames, @testdescriptions, $failed);

$testnum = 0;
$failed  = 0;

sub run_file
{
	my $file = shift;

	require $file;
	exit $failed;
	
}

sub status($)
{
	my $s = shift;

	$0 .= " - $s" unless ( $0 =~ s/(?<= - ).*$/$s/ );
	
}

sub all_files
{
	use File::Basename;
	use IO::Select;
	use POSIX qw( :sys_wait_h );
	
	my (%running, %finished);
	my @files;
	my $sel;	
	
	$0 = "$NAME master"; 
	@files = glob join '/', dirname(__FILE__), '*.t'; 

	$sel = IO::Select->new;

	foreach my $file (@files)
	{
		my $p;
		my ($in, $out);
		
		status "forking testrunner for $file"; 

		unless ( pipe $in, $out )
		{
			die "pipe failed: $!";
		}

		if ($p = fork)
		{
			close $out or die "close (child pipe) failed: $!";

			$running{$p} =
			{
				pid  => $p,
				file => $file,
				pipe => $in,
			};

			$sel->add($in);
			
		}
		else
		{
			$0 = "$NAME testrunner $file";
			status 'setup';
			close $in or die "close (parent pipe) failed: $!";
			close STDOUT or die "close (oldstdout) failed: $!";
			open  STDOUT, '>&', $out or die "open stdout failed $!";
			$| = 1;

			status 'run';

			run_file $file;
		}
		
		status 'setup';
	}


	while (my $left = keys %running)
	{
		if ( $sel->count )
		{
			status 'collecting output';

			foreach my $ready ( $sel->can_read(0.25) )
			{
				my $c = (grep { $_->{pipe} == $ready } 
				              values %running)[0];
				my $buf;

				status 'collecting output from ' . $c->{pid};

				if (  sysread( $ready, $buf, 4096 ) > 0 )
				{
					$c->{stdout} .= $buf;
				}
				else
				{
					$sel->remove( $ready );
				}
				
			}
		}
		
		status sprintf 'waiting for %i childs to finish', $left;

		while ( (my $f = waitpid(-1, WNOHANG)) > 0 )
		{
			my $k;
			
			status "reaping $f";
			$k =  delete $running{$f};
			$k->{status} = $? >> 8;
			$finished{$f} = $k; 
			$sel->remove($k->{pipe}) if $sel->exists($k->{pipe});
		}

	}		
	
	status 'processing results';

	my ($failed) = 0;

	foreach my $t ( values %finished  )
	{
		if ( $t->{status} == 0 )
		{
			printf "PASSED %s\n", $t->{file}; 
		}
		else
		{
			++$failed;
			printf "FAILED %s\n", $t->{file}; 
			print map  { s/^/\t/; s/$/\n/r } 
			      grep { /(FAIL)|(BORK)/ } 
			      split /\n/, $t->{stdout}; 
		}
	}

	exit $failed;

}

sub runsys
{
	my ($cmd, @args) = @_;
	my ($t_start, $t_end, $rv,$h);

	$rv =
	{
		status  => undef,
		stdout  => '',
		stderr  => '',
		runtime => undef,
	};

	$t_start = time;

	$h  = start ( [$cmd, @args], \undef, \$rv->{stdout}, \$rv->{stderr} );	
	finish $h;

	unless ($h)
	{
		die "run bailed out: $! $?";
	}	

	$t_end   = time;

	$rv->{runtime} = $t_end - $t_start;
	$rv->{result}  = $h->result;

	return $rv;
}

sub test
{
	my ($cmd, $args, $test) = @_;
	my $r;
	my $name;

	++$testnum;

	$test = sub { shift->{result} == 0 } unless $test;


	eval 
	{
		$r = runsys $cmd, @{$args};
	};

	$name = $testnames[ $testnum ] // '';	

	if ( $@ )
	{
		printf "BORK % 3i # %s %s\n", $testnum, $@, $name;
		++$failed;
	}
	elsif ( $test->($r) )
	{
		printf "PASS % 3i # %s\n", $testnum, $name;
	}
	else
	{
		printf "FAIL % 3i # %s\n", $testnum, $name;
		++$failed;
	}
}

sub name ($)
{
	$testnames[ $testnum +1 ] = shift;
}

sub description ($)
{
	$testdescriptions[ $testnum + 1 ] = shift;
}

my $file = shift;

if ( !$file or $file eq 'all' )
{
	all_files 
}
else
{
	run_file $file;
}


